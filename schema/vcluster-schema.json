{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://vcluster.com/schemas/config",
  "$ref": "#/$defs/Config",
  "$defs": {
    "AdmissionControl": {
      "properties": {
        "validatingWebhooks": {
          "items": true,
          "type": "array"
        },
        "mutatingWebhooks": {
          "items": true,
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "BackingStore": {
      "properties": {
        "embeddedEtcd": {
          "$ref": "#/$defs/EmbeddedEtcd"
        },
        "externalEtcd": {
          "$ref": "#/$defs/ExternalEtcd"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Config": {
      "properties": {
        "exportKubeConfig": {
          "$ref": "#/$defs/ExportKubeConfig"
        },
        "sync": {
          "$ref": "#/$defs/Sync"
        },
        "observability": {
          "$ref": "#/$defs/Observability"
        },
        "networking": {
          "$ref": "#/$defs/Networking"
        },
        "plugin": {
          "additionalProperties": {
            "$ref": "#/$defs/Plugin"
          },
          "type": "object"
        },
        "plugins": {
          "additionalProperties": {
            "$ref": "#/$defs/Plugins"
          },
          "type": "object"
        },
        "controlPlane": {
          "$ref": "#/$defs/ControlPlane"
        },
        "policies": {
          "$ref": "#/$defs/Policies"
        },
        "rbac": {
          "$ref": "#/$defs/RBAC"
        },
        "telemetry": {
          "$ref": "#/$defs/Telemetry",
          "description": "Telemetry is the configuration related to telemetry gathered about vcluster usage."
        },
        "experimental": {
          "$ref": "#/$defs/Experimental"
        },
        "license": {
          "$ref": "#/$defs/SecretKeyReference"
        },
        "platform": {
          "$ref": "#/$defs/Platform"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlane": {
      "properties": {
        "distro": {
          "$ref": "#/$defs/Distro"
        },
        "hostPathMapper": {
          "$ref": "#/$defs/HostPathMapper"
        },
        "coredns": {
          "$ref": "#/$defs/CoreDNS"
        },
        "virtualScheduler": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "proxy": {
          "$ref": "#/$defs/ControlPlaneProxy"
        },
        "service": {
          "$ref": "#/$defs/ControlPlaneService"
        },
        "ingress": {
          "$ref": "#/$defs/ControlPlaneIngress"
        },
        "highAvailability": {
          "$ref": "#/$defs/ControlPlaneHighAvailability"
        },
        "advanced": {
          "$ref": "#/$defs/ControlPlaneAdvanced"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneAdvanced": {
      "properties": {
        "defaultImageRegistry": {
          "type": "string"
        },
        "image": {
          "$ref": "#/$defs/ImageRef"
        },
        "headless": {
          "type": "boolean"
        },
        "persistence": {
          "$ref": "#/$defs/ControlPlanePersistence"
        },
        "scheduling": {
          "$ref": "#/$defs/ControlPlaneScheduling"
        },
        "serviceAccounts": {
          "$ref": "#/$defs/ControlPlaneServiceAccounts"
        },
        "workloadServiceAccount": {
          "$ref": "#/$defs/ControlPlaneWorkloadServiceAccount"
        },
        "probes": {
          "$ref": "#/$defs/ControlPlaneProbes"
        },
        "security": {
          "$ref": "#/$defs/ControlPlaneSecurity"
        },
        "metadata": {
          "$ref": "#/$defs/ControlPlaneMetadata"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneContainerSecurityContext": {
      "properties": {
        "allowPrivilegeEscalation": {
          "type": "boolean"
        },
        "capabilities": {
          "type": "object"
        },
        "runAsUser": {
          "type": "integer"
        },
        "runAsGroup": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneHighAvailability": {
      "properties": {
        "replicas": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneIngress": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "spec": {
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneMetadata": {
      "properties": {
        "statefulSet": {
          "$ref": "#/$defs/LabelsAndAnnotations"
        },
        "pods": {
          "$ref": "#/$defs/LabelsAndAnnotations"
        },
        "allResources": {
          "$ref": "#/$defs/LabelsAndAnnotations"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlanePersistence": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "retentionPolicy": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "storageClass": {
          "type": "string"
        },
        "addVolumeMounts": {
          "items": {
            "$ref": "#/$defs/VolumeMount"
          },
          "type": "array"
        },
        "overwriteVolumeMounts": {
          "items": {
            "$ref": "#/$defs/VolumeMount"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneProbes": {
      "properties": {
        "livenessProbe": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "readinessProbe": {
          "$ref": "#/$defs/EnableSwitch"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneProxy": {
      "properties": {
        "bindAddress": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "tls": {
          "$ref": "#/$defs/ControlPlaneProxyTLS"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneProxyTLS": {
      "properties": {
        "extraSANs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneScheduling": {
      "properties": {
        "nodeSelector": {
          "type": "object"
        },
        "affinity": {
          "type": "object"
        },
        "tolerations": {
          "type": "object"
        },
        "priorityClassName": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneSecurity": {
      "properties": {
        "podSecurityContext": {
          "type": "object"
        },
        "containerSecurityContext": {
          "$ref": "#/$defs/ControlPlaneContainerSecurityContext"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneService": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "spec": {
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneServiceAccounts": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "imagePullSecrets": {
          "items": {
            "$ref": "#/$defs/LocalObjectReference"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneWorkloadServiceAccount": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "CoreDNS": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "embedded": {
          "type": "boolean"
        },
        "service": {
          "$ref": "#/$defs/CoreDNSService"
        },
        "deployment": {
          "$ref": "#/$defs/CoreDNSDeployment"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "CoreDNSDeployment": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "spec": {
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "CoreDNSService": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "spec": {
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Distro": {
      "properties": {
        "k3s": {
          "$ref": "#/$defs/DistroK3s"
        },
        "k8s": {
          "$ref": "#/$defs/DistroK8s"
        },
        "k0s": {
          "$ref": "#/$defs/DistroK0s"
        },
        "advanced": {
          "$ref": "#/$defs/DistroAdvanced"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroAdvanced": {
      "properties": {
        "paths": {
          "$ref": "#/$defs/DistroPaths"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroContainer": {
      "properties": {
        "spec": {
          "type": "object"
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "command": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "extraArgs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "items": {
            "type": "object"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroK0s": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "backingStore": {
          "$ref": "#/$defs/BackingStore"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroK3s": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "spec": {
          "type": "object"
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "command": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "extraArgs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "token": {
          "type": "string"
        },
        "backingStore": {
          "$ref": "#/$defs/BackingStore"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroK8s": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "apiServer": {
          "$ref": "#/$defs/DistroContainer"
        },
        "controllerManager": {
          "$ref": "#/$defs/DistroContainer"
        },
        "scheduler": {
          "$ref": "#/$defs/DistroContainer"
        },
        "backingStore": {
          "$ref": "#/$defs/BackingStore"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroPaths": {
      "properties": {
        "kubeConfig": {
          "type": "string"
        },
        "serverCAKey": {
          "type": "string"
        },
        "serverCACert": {
          "type": "string"
        },
        "clientCACert": {
          "type": "string"
        },
        "requestHeaderCACert": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmbeddedEtcd": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "migrateFromSqlite": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EnableSwitch": {
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Experimental": {
      "properties": {
        "Extended": {
          "type": "object"
        },
        "controlPlaneSettings": {
          "$ref": "#/$defs/ExperimentalControlPlaneSettings"
        },
        "syncSettings": {
          "$ref": "#/$defs/ExperimentalSyncSettings"
        },
        "syncPatches": {
          "$ref": "#/$defs/SyncPatches"
        },
        "genericSync": {
          "$ref": "#/$defs/SyncPatches"
        },
        "deploy": {
          "$ref": "#/$defs/ExperimentalDeploy"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExperimentalControlPlaneSettings": {
      "properties": {
        "rewriteKubernetesService": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExperimentalDeploy": {
      "properties": {
        "manifests": {
          "type": "string"
        },
        "manifestsTemplate": {
          "type": "string"
        },
        "helm": {
          "items": true,
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExperimentalSyncSettings": {
      "properties": {
        "disableSync": {
          "type": "boolean"
        },
        "target": {
          "$ref": "#/$defs/ExperimentalSyncSettingsTarget"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExperimentalSyncSettingsTarget": {
      "properties": {
        "namespace": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Export": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion of the object to sync"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the object to sync"
        },
        "optional": {
          "type": "boolean"
        },
        "replaceOnConflict": {
          "type": "boolean",
          "description": "ReplaceWhenInvalid determines if the controller should try to recreate the object\nif there is a problem applying"
        },
        "patches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "Patches are the patches to apply on the virtual cluster objects\nwhen syncing them from the host cluster"
        },
        "reversePatches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "ReversePatches are the patches to apply to host cluster objects\nafter it has been synced to the virtual cluster"
        },
        "selector": {
          "$ref": "#/$defs/Selector",
          "description": "Selector is a label selector to select the synced objects in the virtual cluster.\nIf empty, all objects will be synced."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExportKubeConfig": {
      "properties": {
        "context": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "secret": {
          "$ref": "#/$defs/SecretReference"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExternalEtcd": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "image": {
          "type": "string"
        },
        "replicas": {
          "type": "integer"
        },
        "security": {
          "$ref": "#/$defs/ControlPlaneSecurity"
        },
        "scheduling": {
          "$ref": "#/$defs/ControlPlaneScheduling"
        },
        "persistence": {
          "$ref": "#/$defs/ControlPlanePersistence"
        },
        "metadata": {
          "$ref": "#/$defs/ExternalEtcdMetadata"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExternalEtcdMetadata": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Hook": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion of the object to sync"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the object to sync"
        },
        "verbs": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Verbs are the verbs that the hook should mutate"
        },
        "patches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "Patches are the patches to apply on the object to be synced"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Hooks": {
      "properties": {
        "hostToVirtual": {
          "items": {
            "$ref": "#/$defs/Hook"
          },
          "type": "array",
          "description": "HostToVirtual is a hook that is executed before syncing from the host to the virtual cluster"
        },
        "virtualToHost": {
          "items": {
            "$ref": "#/$defs/Hook"
          },
          "type": "array",
          "description": "VirtualToHost is a hook that is executed before syncing from the virtual to the host cluster"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "HostPathMapper": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "central": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "IPBlock": {
      "properties": {
        "cidr": {
          "type": "string",
          "description": "cidr is a string representing the IPBlock\nValid examples are \"192.168.1.0/24\" or \"2001:db8::/64\""
        },
        "except": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "except is a slice of CIDRs that should not be included within an IPBlock\nValid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"\nExcept values will be rejected if they are outside the cidr range\n+optional"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "IPBlock describes a particular CIDR (Ex."
    },
    "ImageRef": {
      "properties": {
        "repository": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Import": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion of the object to sync"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the object to sync"
        },
        "optional": {
          "type": "boolean"
        },
        "replaceOnConflict": {
          "type": "boolean",
          "description": "ReplaceWhenInvalid determines if the controller should try to recreate the object\nif there is a problem applying"
        },
        "patches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "Patches are the patches to apply on the virtual cluster objects\nwhen syncing them from the host cluster"
        },
        "reversePatches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "ReversePatches are the patches to apply to host cluster objects\nafter it has been synced to the virtual cluster"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LabelSelectorRequirement": {
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the label key that the selector applies to."
        },
        "operator": {
          "type": "string",
          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LabelsAndAnnotations": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LimitRange": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "default": {
          "$ref": "#/$defs/LimitRangeLimits"
        },
        "defaultRequest": {
          "$ref": "#/$defs/LimitRangeLimits"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LimitRangeLimits": {
      "properties": {
        "ephemeral-storage": {
          "type": "string"
        },
        "memory": {
          "type": "string"
        },
        "cpu": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LocalObjectReference": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace."
    },
    "MetricsProxy": {
      "properties": {
        "nodes": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "pods": {
          "$ref": "#/$defs/EnableSwitch"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "NetworkDNSFallback": {
      "properties": {
        "ip": {
          "type": "string"
        },
        "hostCluster": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "NetworkPolicy": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "outgoingConnections": {
          "$ref": "#/$defs/OutgoingConnections"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "NetworkProxyKubelets": {
      "properties": {
        "byHostname": {
          "type": "boolean"
        },
        "byIP": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Networking": {
      "properties": {
        "replicateServices": {
          "$ref": "#/$defs/ReplicateServices"
        },
        "resolveServices": {
          "$ref": "#/$defs/ResolveServices"
        },
        "advanced": {
          "$ref": "#/$defs/NetworkingAdvanced"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "NetworkingAdvanced": {
      "properties": {
        "clusterDomain": {
          "type": "string"
        },
        "fallback": {
          "items": {
            "$ref": "#/$defs/NetworkDNSFallback"
          },
          "type": "array"
        },
        "proxyKubelets": {
          "$ref": "#/$defs/NetworkProxyKubelets"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Observability": {
      "properties": {
        "serviceMonitor": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "metrics": {
          "$ref": "#/$defs/ObservabilityMetrics"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ObservabilityMetrics": {
      "properties": {
        "proxy": {
          "$ref": "#/$defs/MetricsProxy"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "OutgoingConnections": {
      "properties": {
        "ipBlock": {
          "$ref": "#/$defs/IPBlock"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Patch": {
      "properties": {
        "op": {
          "type": "string",
          "description": "Operation is the type of the patch"
        },
        "fromPath": {
          "type": "string",
          "description": "FromPath is the path from the other object"
        },
        "path": {
          "type": "string",
          "description": "Path is the path of the patch"
        },
        "namePath": {
          "type": "string",
          "description": "NamePath is the path to the name of a child resource within Path"
        },
        "namespacePath": {
          "type": "string",
          "description": "NamespacePath is path to the namespace of a child resource within Path"
        },
        "value": {
          "description": "Value is the new value to be set to the path"
        },
        "regex": {
          "type": "string",
          "description": "Regex - is regular expresion used to identify the Name,\nand optionally Namespace, parts of the field value that\nwill be replaced with the rewritten Name and/or Namespace"
        },
        "conditions": {
          "items": {
            "$ref": "#/$defs/PatchCondition"
          },
          "type": "array",
          "description": "Conditions are conditions that must be true for\nthe patch to get executed"
        },
        "ignore": {
          "type": "boolean",
          "description": "Ignore determines if the path should be ignored if handled as a reverse patch"
        },
        "sync": {
          "$ref": "#/$defs/PatchSync",
          "description": "Sync defines if a specialized syncer should be initialized using values\nfrom the rewriteName operation as Secret/Configmap names to be synced"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PatchCondition": {
      "properties": {
        "path": {
          "type": "string",
          "description": "Path is the path within the object to select"
        },
        "subPath": {
          "type": "string",
          "description": "SubPath is the path below the selected object to select"
        },
        "equal": {
          "description": "Equal is the value the path should be equal to"
        },
        "notEqual": {
          "description": "NotEqual is the value the path should not be equal to"
        },
        "empty": {
          "type": "boolean",
          "description": "Empty means that the path value should be empty or unset"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PatchSync": {
      "properties": {
        "secret": {
          "type": "boolean"
        },
        "configmap": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Platform": {
      "properties": {
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "apiKey": {
          "$ref": "#/$defs/SecretKeyReference"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Plugin": {
      "properties": {
        "image": {
          "type": "string"
        },
        "config": {
          "type": "object"
        },
        "rbac": {
          "$ref": "#/$defs/PluginsRBAC"
        },
        "version": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Plugins": {
      "properties": {
        "image": {
          "type": "string"
        },
        "config": {
          "type": "object"
        },
        "rbac": {
          "$ref": "#/$defs/PluginsRBAC"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PluginsRBAC": {
      "properties": {
        "role": {
          "items": {
            "$ref": "#/$defs/RBACPolicyRule"
          },
          "type": "array"
        },
        "clusterRole": {
          "items": {
            "$ref": "#/$defs/RBACPolicyRule"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Policies": {
      "properties": {
        "podSecurityStandard": {
          "type": "string"
        },
        "resourceQuota": {
          "$ref": "#/$defs/ResourceQuota"
        },
        "limitRange": {
          "$ref": "#/$defs/LimitRange"
        },
        "networkPolicy": {
          "$ref": "#/$defs/NetworkPolicy"
        },
        "admissionControl": {
          "$ref": "#/$defs/AdmissionControl"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RBAC": {
      "properties": {
        "clusterRole": {
          "$ref": "#/$defs/RBACClusterRole"
        },
        "role": {
          "$ref": "#/$defs/RBACRole"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RBACClusterRole": {
      "properties": {
        "create": {
          "type": "boolean"
        },
        "extraRules": true
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RBACPolicyRule": {
      "properties": {
        "verbs": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs."
        },
        "apiGroups": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of\nthe enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups."
        },
        "resources": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Resources is a list of resources this rule applies to. '*' represents all resources."
        },
        "resourceNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed."
        },
        "nonResourceURLs": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path\nSince non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding.\nRules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RBACRole": {
      "properties": {
        "create": {
          "type": "boolean"
        },
        "extraRules": true,
        "excludedApiResources": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ReplicateServices": {
      "properties": {
        "toHost": {
          "$ref": "#/$defs/ServiceMapping"
        },
        "fromHost": {
          "$ref": "#/$defs/ServiceMapping"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ResolveServiceHostname": {
      "properties": {
        "hostname": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ResolveServiceService": {
      "properties": {
        "service": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ResolveServiceTarget": {
      "properties": {
        "vcluster": {
          "$ref": "#/$defs/ResolveServiceService"
        },
        "host": {
          "$ref": "#/$defs/ResolveServiceService"
        },
        "external": {
          "$ref": "#/$defs/ResolveServiceHostname"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ResolveServices": {
      "properties": {
        "service": {
          "type": "string"
        },
        "target": {
          "$ref": "#/$defs/ResolveServiceTarget"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ResourceQuota": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "quota": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "scopeSelector": {
          "$ref": "#/$defs/ScopeSelector"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ScopeSelector": {
      "properties": {
        "matchExpressions": {
          "items": {
            "$ref": "#/$defs/LabelSelectorRequirement"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SecretKeyReference": {
      "properties": {
        "key": {
          "type": "string"
        },
        "keySecretRef": {
          "$ref": "#/$defs/SecretReference"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SecretReference": {
      "properties": {
        "name": {
          "type": "string",
          "description": "name is unique within a namespace to reference a secret resource."
        },
        "namespace": {
          "type": "string",
          "description": "namespace defines the space within which the secret name must be unique."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "SecretReference represents a Secret Reference."
    },
    "Selector": {
      "properties": {
        "labelSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "LabelSelector are the labels to select the object from"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ServiceMapping": {
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Sync": {
      "properties": {
        "ToHost": {
          "$ref": "#/$defs/SyncToHost"
        },
        "FromHost": {
          "$ref": "#/$defs/SyncFromHost"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncAllResource": {
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncFromHost": {
      "properties": {
        "csiDrivers": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "csiNodes": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "csiStorageCapacities": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "ingressClasses": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "events": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "storageClasses": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "nodes": {
          "$ref": "#/$defs/SyncNodes"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncNodeSelector": {
      "properties": {
        "label": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncNodes": {
      "properties": {
        "real": {
          "$ref": "#/$defs/SyncRealNodes"
        },
        "pseudo": {
          "$ref": "#/$defs/EnableSwitch"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncPatches": {
      "properties": {
        "version": {
          "type": "string",
          "description": "Version is the config version"
        },
        "export": {
          "items": {
            "$ref": "#/$defs/Export"
          },
          "type": "array",
          "description": "Exports syncs a resource from the virtual cluster to the host"
        },
        "import": {
          "items": {
            "$ref": "#/$defs/Import"
          },
          "type": "array",
          "description": "Imports syncs a resource from the host cluster to virtual cluster"
        },
        "hooks": {
          "$ref": "#/$defs/Hooks",
          "description": "Hooks are hooks that can be used to inject custom patches before syncing"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncPods": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "workloadServiceAccount": {
          "type": "string"
        },
        "translateImage": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "enforceTolerations": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "validate format"
        },
        "useSecretsForSATokens": {
          "type": "boolean"
        },
        "rewriteHosts": {
          "$ref": "#/$defs/SyncRewriteHosts"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncRealNodes": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "syncLabelsTaints": {
          "type": "boolean"
        },
        "clearImageStatus": {
          "type": "boolean"
        },
        "selector": {
          "$ref": "#/$defs/SyncNodeSelector"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncRewriteHosts": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "initContainerImage": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncToHost": {
      "properties": {
        "services": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "endpoints": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "ingresses": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "priorityClasses": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "networkPolicies": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "volumeSnapshots": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "podDisruptionBudgets": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "serviceAccounts": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "storageClasses": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "persistentVolumes": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "persistentVolumeClaims": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "configMaps": {
          "$ref": "#/$defs/SyncAllResource"
        },
        "secrets": {
          "$ref": "#/$defs/SyncAllResource"
        },
        "pods": {
          "$ref": "#/$defs/SyncPods"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Telemetry": {
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "instanceCreators": {
          "type": "string"
        },
        "platformUserID": {
          "type": "string"
        },
        "platformInstanceID": {
          "type": "string"
        },
        "machineID": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "VolumeMount": {
      "properties": {
        "name": {
          "type": "string",
          "description": "This must match the Name of a Volume."
        },
        "readOnly": {
          "type": "boolean",
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false."
        },
        "mountPath": {
          "type": "string",
          "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'."
        },
        "subPath": {
          "type": "string",
          "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root)."
        },
        "mountPropagation": {
          "type": "string",
          "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10."
        },
        "subPathExpr": {
          "type": "string",
          "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "VolumeMount describes a mounting of a Volume within a container."
    }
  }
}